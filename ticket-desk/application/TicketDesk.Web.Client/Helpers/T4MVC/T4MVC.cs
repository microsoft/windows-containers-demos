
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    static readonly AdminClass s_Admin = new AdminClass();
    public static AdminClass Admin { get { return s_Admin; } }
    public static TicketDesk.Web.Client.Controllers.AccountController Account = new TicketDesk.Web.Client.Controllers.T4MVC_AccountController();
    public static TicketDesk.Web.Client.Controllers.AttachmentController Attachment = new TicketDesk.Web.Client.Controllers.T4MVC_AttachmentController();
    public static TicketDesk.Web.Client.Controllers.HomeController Home = new TicketDesk.Web.Client.Controllers.T4MVC_HomeController();
    public static TicketDesk.Web.Client.Controllers.MarkdownController Markdown = new TicketDesk.Web.Client.Controllers.T4MVC_MarkdownController();
    public static TicketDesk.Web.Client.Controllers.NewTicketController NewTicket = new TicketDesk.Web.Client.Controllers.T4MVC_NewTicketController();
    public static TicketDesk.Web.Client.Controllers.TagListController TagList = new TicketDesk.Web.Client.Controllers.T4MVC_TagListController();
    public static TicketDesk.Web.Client.Controllers.TicketCenterController TicketCenter = new TicketDesk.Web.Client.Controllers.T4MVC_TicketCenterController();
    public static TicketDesk.Web.Client.Controllers.TicketEditorController TicketEditor = new TicketDesk.Web.Client.Controllers.T4MVC_TicketEditorController();
    public static TicketDesk.Web.Client.Controllers.TicketSearchController TicketSearch = new TicketDesk.Web.Client.Controllers.T4MVC_TicketSearchController();
    public static TicketDesk.Web.Client.Controllers.UploaderController Uploader = new TicketDesk.Web.Client.Controllers.T4MVC_UploaderController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class AdminClass {
        public readonly string Name = "Admin";
        public TicketDesk.Web.Client.Areas.Admin.Controllers.AdminHomeController AdminHome = new TicketDesk.Web.Client.Areas.Admin.Controllers.T4MVC_AdminHomeController();
        public TicketDesk.Web.Client.Areas.Admin.Controllers.ApplicationSettingsController ApplicationSettings = new TicketDesk.Web.Client.Areas.Admin.Controllers.T4MVC_ApplicationSettingsController();
        public TicketDesk.Web.Client.Areas.Admin.Controllers.EmailTemplateController EmailTemplate = new TicketDesk.Web.Client.Areas.Admin.Controllers.T4MVC_EmailTemplateController();
        public TicketDesk.Web.Client.Areas.Admin.Controllers.SecurityManagementController SecurityManagement = new TicketDesk.Web.Client.Areas.Admin.Controllers.T4MVC_SecurityManagementController();
        public T4MVC.Admin.SharedController Shared = new T4MVC.Admin.SharedController();
    }
}

namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC methods can only be passed pseudo-action calls (e.g. MVC.Home.About()), and not real action calls.");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? ""); 
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ContentResult : System.Web.Mvc.ContentResult, IT4MVCActionResult {
    public T4MVC_ContentResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult {
    public T4MVC_JsonResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class corner {
            private const string URLPATH = "~/Scripts/corner";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_corner_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.corner.min.js") ? Url("jquery.corner.min.js") : Url("jquery.corner.js");
                          
        }
    
        public static readonly string jquery_1_4_1_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.1-vsdoc.min.js") ? Url("jquery-1.4.1-vsdoc.min.js") : Url("jquery-1.4.1-vsdoc.js");
                      
        public static readonly string jquery_1_4_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.1.min.js") ? Url("jquery-1.4.1.min.js") : Url("jquery-1.4.1.js");
                      
        public static readonly string jquery_1_4_1_min_js = Url("jquery-1.4.1.min.js");
        public static readonly string jquery_1_4_4_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.4-vsdoc.min.js") ? Url("jquery-1.4.4-vsdoc.min.js") : Url("jquery-1.4.4-vsdoc.js");
                      
        public static readonly string jquery_1_4_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.4.4.min.js") ? Url("jquery-1.4.4.min.js") : Url("jquery-1.4.4.js");
                      
        public static readonly string jquery_1_4_4_min_js = Url("jquery-1.4.4.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery_autocomplete {
            private const string URLPATH = "~/Scripts/jquery-autocomplete";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string changelog_txt = Url("changelog.txt");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class demo {
                private const string URLPATH = "~/Scripts/jquery-autocomplete/demo";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bg_gif = Url("bg.gif");
                public static readonly string emails_php = Url("emails.php");
                public static readonly string emails_phps = Url("emails.phps");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Scripts/jquery-autocomplete/demo/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string Amsterdam_Van_Gogh_Museum_jpg = Url("Amsterdam Van-Gogh Museum.jpg");
                    public static readonly string Amsterdam_jpg = Url("Amsterdam.jpg");
                    public static readonly string Antwerpen_Rubenshaus_jpg = Url("Antwerpen Rubenshaus.jpg");
                    public static readonly string Antwerpen_jpg = Url("Antwerpen.jpg");
                    public static readonly string Appenzell_jpg = Url("Appenzell.jpg");
                    public static readonly string Arnhem_Historisches_Museum_jpg = Url("Arnhem Historisches Museum.jpg");
                    public static readonly string Bled_jpg = Url("Bled.jpg");
                    public static readonly string Bled_Die_Burg_von_Bled_jpg = Url("Bled_Die Burg von Bled.jpg");
                    public static readonly string Bogojina_Die_Pfarrkirche_jpg = Url("Bogojina_Die Pfarrkirche.jpg");
                    public static readonly string BolognaBasilicadiSanPetronio_jpg = Url("BolognaBasilicadiSanPetronio.jpg");
                    public static readonly string BolognaFontanadelNettuno_jpg = Url("BolognaFontanadelNettuno.jpg");
                    public static readonly string BolognaPiazzaMaggiore_jpg = Url("BolognaPiazzaMaggiore.jpg");
                    public static readonly string Bolsward_Martinikerk_jpg = Url("Bolsward Martinikerk.jpg");
                    public static readonly string Bolsward_Stadhuis_jpg = Url("Bolsward Stadhuis.jpg");
                    public static readonly string Bolsward_jpg = Url("Bolsward.jpg");
                    public static readonly string BordeauxND_jpg = Url("BordeauxND.jpg");
                    public static readonly string BordeauxPlaceB_jpg = Url("BordeauxPlaceB.jpg");
                    public static readonly string BotanischerGartenZuerich_jpg = Url("BotanischerGartenZuerich.jpg");
                    public static readonly string Bouillon_jpg = Url("Bouillon.jpg");
                    public static readonly string Gent_Hotel_de_Ville2_jpg = Url("Gent Hotel de Ville2.jpg");
                    public static readonly string Gent_jpg = Url("Gent.jpg");
                    public static readonly string GenuabeiNacht_jpg = Url("GenuabeiNacht.jpg");
                    public static readonly string GenuaStrand_jpg = Url("GenuaStrand.jpg");
                    public static readonly string Giessbachfaelle_Brienz_jpg = Url("Giessbachfaelle Brienz.jpg");
                    public static readonly string Giethoorn_jpg = Url("Giethoorn.jpg");
                    public static readonly string Gnesen_jpg = Url("Gnesen.jpg");
                    public static readonly string Gornij_Grad_KATHEDRALE_jpg = Url("Gornij Grad_KATHEDRALE.jpg");
                    public static readonly string Gossensass_jpg = Url("Gossensass.jpg");
                    public static readonly string Grad_Burg_Grad2_jpg = Url("Grad_Burg Grad2.jpg");
                    public static readonly string GrandDixence_jpg = Url("GrandDixence.jpg");
                    public static readonly string GrenoblePanorama_jpg = Url("GrenoblePanorama.jpg");
                    public static readonly string Groningen_jpg = Url("Groningen.jpg");
                    public static readonly string GrottenvonReclere_jpg = Url("GrottenvonReclere.jpg");
                    public static readonly string Guebwiller_jpg = Url("Guebwiller.jpg");
                    public static readonly string Kamnik_Die_Franziskaner_Bibliothek_jpg = Url("Kamnik_Die Franziskaner Bibliothek.jpg");
                    public static readonly string Karlsbad_Muehlbrunnkolonnade_jpg = Url("Karlsbad Muehlbrunnkolonnade.jpg");
                    public static readonly string Kazimierz_jpg = Url("Kazimierz.jpg");
                    public static readonly string KirchbergAltesRathaus1_jpg = Url("KirchbergAltesRathaus1.jpg");
                    public static readonly string KlagenfurtDom_jpg = Url("KlagenfurtDom.jpg");
                    public static readonly string KleineMeerjungfreu_jpg = Url("KleineMeerjungfreu.jpg");
                    public static readonly string LazienkiparkWarschau_jpg = Url("LazienkiparkWarschau.jpg");
                    public static readonly string Lednice_jpg = Url("Lednice.jpg");
                    public static readonly string Leeuwarden_Fries_Museum_jpg = Url("Leeuwarden Fries Museum.jpg");
                    public static readonly string Leeuwarden_jpg = Url("Leeuwarden.jpg");
                    public static readonly string LeHavreHafen_jpg = Url("LeHavreHafen.jpg");
                    public static readonly string Lelystad_jpg = Url("Lelystad.jpg");
                    public static readonly string LeMans_jpg = Url("LeMans.jpg");
                    public static readonly string Lemmer_jpg = Url("Lemmer.jpg");
                    public static readonly string Leper_Halles_aux_draps_jpg = Url("Leper Halles aux draps.jpg");
                    public static readonly string Leuven_Museum_fuer_Kirchenkunst_jpg = Url("Leuven Museum fuer Kirchenkunst.jpg");
                    public static readonly string Leuven_jpg = Url("Leuven.jpg");
                    public static readonly string Luxemburg_jpg = Url("Luxemburg.jpg");
                    public static readonly string LuzernAltstadt_jpg = Url("LuzernAltstadt.jpg");
                    public static readonly string LuzernPicassoMuseum_jpg = Url("LuzernPicassoMuseum.jpg");
                    public static readonly string Lyon_jpg = Url("Lyon.jpg");
                    public static readonly string Maastricht_Onze_Lieve_Vrou___jpg = Url("Maastricht Onze Lieve Vrou...jpg");
                    public static readonly string Maastricht_St_Servaasbasiliek_jpg = Url("Maastricht St Servaasbasiliek.jpg");
                    public static readonly string Maastricht_Walmuur_jpg = Url("Maastricht Walmuur.jpg");
                    public static readonly string Maastricht_jpg = Url("Maastricht.jpg");
                    public static readonly string MagiatalMaggia_jpg = Url("MagiatalMaggia.jpg");
                    public static readonly string Mailand3_jpg = Url("Mailand3.jpg");
                    public static readonly string Metlika_Bela_Krajina_Museum_jpg = Url("Metlika_Bela Krajina Museum.jpg");
                    public static readonly string MilanoCastelloSforzesco_jpg = Url("MilanoCastelloSforzesco.jpg");
                    public static readonly string MilanoDom_jpg = Url("MilanoDom.jpg");
                    public static readonly string MilazzoBurg_jpg = Url("MilazzoBurg.jpg");
                    public static readonly string Novo_Mesto_Das_Museum_jpg = Url("Novo Mesto_Das Museum.jpg");
                    public static readonly string ObervellachBurgFalkenstein_jpg = Url("ObervellachBurgFalkenstein.jpg");
                    public static readonly string OdenseeAndersen_jpg = Url("OdenseeAndersen.jpg");
                    public static readonly string Olimje_Kirche_und_Apotheke_in_Olimje_jpg = Url("Olimje_Kirche und Apotheke in Olimje.jpg");
                    public static readonly string Olomouc_jpg = Url("Olomouc.jpg");
                    public static readonly string OlympischesMuseumLausanne_jpg = Url("OlympischesMuseumLausanne.jpg");
                    public static readonly string OrleansMaisonJeannedArc_jpg = Url("OrleansMaisonJeannedArc.jpg");
                    public static readonly string OrleansParcFloraldelaSource_jpg = Url("OrleansParcFloraldelaSource.jpg");
                    public static readonly string OstiaAntica_jpg = Url("OstiaAntica.jpg");
                    public static readonly string Ostrow_Tumski_jpg = Url("Ostrow Tumski.jpg");
                    public static readonly string PoertschachSchlossLeonstain_jpg = Url("PoertschachSchlossLeonstain.jpg");
                    public static readonly string Portoroz_jpg = Url("Portoroz.jpg");
                    public static readonly string Posen_jpg = Url("Posen.jpg");
                    public static readonly string Postojna_jpg = Url("Postojna.jpg");
                    public static readonly string Prag_Altstaedter_Ring_jpg = Url("Prag Altstaedter Ring.jpg");
                    public static readonly string Prag_Waldsteinpalais_jpg = Url("Prag Waldsteinpalais.jpg");
                    public static readonly string RouenNotreDame_jpg = Url("RouenNotreDame.jpg");
                    public static readonly string Salzbergwerk_Bex_jpg = Url("Salzbergwerk Bex.jpg");
                    public static readonly string SalzbergwerkWieliczka_jpg = Url("SalzbergwerkWieliczka.jpg");
                    public static readonly string SalzburgFestungHohensalzburg_jpg = Url("SalzburgFestungHohensalzburg.jpg");
                    public static readonly string SalzburgResidenz_jpg = Url("SalzburgResidenz.jpg");
                    public static readonly string WienMuseumsQuartier_jpg = Url("WienMuseumsQuartier.jpg");
                    public static readonly string WienMusikverein_jpg = Url("WienMusikverein.jpg");
                    public static readonly string WienRiesenrad_jpg = Url("WienRiesenrad.jpg");
                    public static readonly string WienRingstrasse_jpg = Url("WienRingstrasse.jpg");
                }
            
                public static readonly string images_php = Url("images.php");
                public static readonly string index_html = Url("index.html");
                public static readonly string indicator_gif = Url("indicator.gif");
                public static readonly string json_html = Url("json.html");
                public static readonly string localdata_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/localdata.min.js") ? Url("localdata.min.js") : Url("localdata.js");
                              
                public static readonly string main_css = Url("main.css");
                public static readonly string search_php = Url("search.php");
                public static readonly string search_phps = Url("search.phps");
            }
        
            public static readonly string indicator_gif = Url("indicator.gif");
            public static readonly string jquery_autocomplete_css = Url("jquery.autocomplete.css");
            public static readonly string jquery_autocomplete_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.min.js") ? Url("jquery.autocomplete.min.js") : Url("jquery.autocomplete.js");
                          
            public static readonly string jquery_autocomplete_min_js = Url("jquery.autocomplete.min.js");
            public static readonly string jquery_autocomplete_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.pack.min.js") ? Url("jquery.autocomplete.pack.min.js") : Url("jquery.autocomplete.pack.js");
                          
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class lib {
                private const string URLPATH = "~/Scripts/jquery-autocomplete/lib";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_ajaxQueue_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ajaxQueue.min.js") ? Url("jquery.ajaxQueue.min.js") : Url("jquery.ajaxQueue.js");
                              
                public static readonly string jquery_bgiframe_min_js = Url("jquery.bgiframe.min.js");
                public static readonly string jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.min.js") ? Url("jquery.min.js") : Url("jquery.js");
                              
                public static readonly string thickbox_compressed_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/thickbox-compressed.min.js") ? Url("thickbox-compressed.min.js") : Url("thickbox-compressed.js");
                              
                public static readonly string thickbox_css = Url("thickbox.css");
            }
        
            public static readonly string todo = Url("todo");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery_qtip_1_0_0_beta3_1020438 {
            private const string URLPATH = "~/Scripts/jquery-qtip-1.0.0-beta3.1020438";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string INSTALL = Url("INSTALL");
            public static readonly string jquery_qtip_1_0_0_beta3_1_min_js = Url("jquery.qtip-1.0.0-beta3.1.min.js");
            public static readonly string LICENSE = Url("LICENSE");
            public static readonly string REQUIREMENTS = Url("REQUIREMENTS");
        }
    
        public static readonly string jquery_ui_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.js") ? Url("jquery-ui.min.js") : Url("jquery-ui.js");
                      
        public static readonly string jquery_ui_min_js = Url("jquery-ui.min.js");
        public static readonly string jquery_clickable_0_1_9_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.clickable-0.1.9.min.js") ? Url("jquery.clickable-0.1.9.min.js") : Url("jquery.clickable-0.1.9.js");
                      
        public static readonly string jquery_hoverIntent_minified_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.hoverIntent.minified.min.js") ? Url("jquery.hoverIntent.minified.min.js") : Url("jquery.hoverIntent.minified.js");
                      
        public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
                      
        public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                      
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class markitup_editor {
            private const string URLPATH = "~/Scripts/markitup-editor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Scripts/markitup-editor/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string body_png = Url("body.png");
                public static readonly string jaysalvat_png = Url("jaysalvat.png");
                public static readonly string markitup_png = Url("markitup.png");
                public static readonly string style_css = Url("style.css");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class markitup {
                private const string URLPATH = "~/Scripts/markitup-editor/markitup";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_markitup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.markitup.min.js") ? Url("jquery.markitup.min.js") : Url("jquery.markitup.js");
                              
                public static readonly string readme_txt = Url("readme.txt");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class sets {
                    private const string URLPATH = "~/Scripts/markitup-editor/markitup/sets";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class @default {
                        private const string URLPATH = "~/Scripts/markitup-editor/markitup/sets/default";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/markitup-editor/markitup/sets/default/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string bold_png = Url("bold.png");
                            public static readonly string clean_png = Url("clean.png");
                            public static readonly string image_png = Url("image.png");
                            public static readonly string italic_png = Url("italic.png");
                            public static readonly string link_png = Url("link.png");
                            public static readonly string picture_png = Url("picture.png");
                            public static readonly string preview_png = Url("preview.png");
                            public static readonly string stroke_png = Url("stroke.png");
                        }
                    
                        public static readonly string set_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/set.min.js") ? Url("set.min.js") : Url("set.js");
                                      
                        public static readonly string style_css = Url("style.css");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class markdown {
                        private const string URLPATH = "~/Scripts/markitup-editor/markitup/sets/markdown";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/markitup-editor/markitup/sets/markdown/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string bold_png = Url("bold.png");
                            public static readonly string code_png = Url("code.png");
                            public static readonly string h1_png = Url("h1.png");
                            public static readonly string h2_png = Url("h2.png");
                            public static readonly string h3_png = Url("h3.png");
                            public static readonly string h4_png = Url("h4.png");
                            public static readonly string h5_png = Url("h5.png");
                            public static readonly string h6_png = Url("h6.png");
                            public static readonly string italic_png = Url("italic.png");
                            public static readonly string killPreview_png = Url("killPreview.png");
                            public static readonly string link_png = Url("link.png");
                            public static readonly string list_bullet_png = Url("list-bullet.png");
                            public static readonly string list_numeric_png = Url("list-numeric.png");
                            public static readonly string picture_png = Url("picture.png");
                            public static readonly string preview_png = Url("preview.png");
                            public static readonly string quotes_png = Url("quotes.png");
                        }
                    
                        public static readonly string readme_txt = Url("readme.txt");
                        public static readonly string set_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/set.min.js") ? Url("set.min.js") : Url("set.js");
                                      
                        public static readonly string style_css = Url("style.css");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class skins {
                    private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class markdown {
                        private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins/markdown";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string CommentStyle_css = Url("CommentStyle.css");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins/markdown/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string bg_container_png = Url("bg-container.png");
                            public static readonly string bg_editor_bbcode_png = Url("bg-editor-bbcode.png");
                            public static readonly string bg_editor_dotclear_png = Url("bg-editor-dotclear.png");
                            public static readonly string bg_editor_html_png = Url("bg-editor-html.png");
                            public static readonly string bg_editor_json_png = Url("bg-editor-json.png");
                            public static readonly string bg_editor_markdown_png = Url("bg-editor-markdown.png");
                            public static readonly string bg_editor_preview_png = Url("bg-editor-preview.png");
                            public static readonly string bg_editor_preview_psd = Url("bg-editor-preview.psd");
                            public static readonly string bg_editor_textile_png = Url("bg-editor-textile.png");
                            public static readonly string bg_editor_wiki_png = Url("bg-editor-wiki.png");
                            public static readonly string bg_editor_xml_png = Url("bg-editor-xml.png");
                            public static readonly string bg_editor_png = Url("bg-editor.png");
                            public static readonly string handle_png = Url("handle.png");
                            public static readonly string menu_png = Url("menu.png");
                            public static readonly string submenu_png = Url("submenu.png");
                        }
                    
                        public static readonly string style_css = Url("style.css");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class markitup {
                        private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins/markitup";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins/markitup/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string bg_container_png = Url("bg-container.png");
                            public static readonly string bg_editor_bbcode_png = Url("bg-editor-bbcode.png");
                            public static readonly string bg_editor_dotclear_png = Url("bg-editor-dotclear.png");
                            public static readonly string bg_editor_html_png = Url("bg-editor-html.png");
                            public static readonly string bg_editor_json_png = Url("bg-editor-json.png");
                            public static readonly string bg_editor_markdown_png = Url("bg-editor-markdown.png");
                            public static readonly string bg_editor_textile_png = Url("bg-editor-textile.png");
                            public static readonly string bg_editor_wiki_png = Url("bg-editor-wiki.png");
                            public static readonly string bg_editor_xml_png = Url("bg-editor-xml.png");
                            public static readonly string bg_editor_png = Url("bg-editor.png");
                            public static readonly string handle_png = Url("handle.png");
                            public static readonly string menu_png = Url("menu.png");
                            public static readonly string submenu_png = Url("submenu.png");
                        }
                    
                        public static readonly string style_css = Url("style.css");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class simple {
                        private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins/simple";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/markitup-editor/markitup/skins/simple/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string handle_png = Url("handle.png");
                            public static readonly string menu_png = Url("menu.png");
                            public static readonly string submenu_png = Url("submenu.png");
                        }
                    
                        public static readonly string style_css = Url("style.css");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class templates {
                    private const string URLPATH = "~/Scripts/markitup-editor/markitup/templates";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string preview_css = Url("preview.css");
                    public static readonly string preview_html = Url("preview.html");
                }
            
            }
        
        }
    
        public static readonly string MicrosoftAjax_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftAjax.debug.min.js") ? Url("MicrosoftAjax.debug.min.js") : Url("MicrosoftAjax.debug.js");
                      
        public static readonly string MicrosoftAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftAjax.min.js") ? Url("MicrosoftAjax.min.js") : Url("MicrosoftAjax.js");
                      
        public static readonly string MicrosoftMvcAjax_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcAjax.debug.min.js") ? Url("MicrosoftMvcAjax.debug.min.js") : Url("MicrosoftMvcAjax.debug.js");
                      
        public static readonly string MicrosoftMvcAjax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcAjax.min.js") ? Url("MicrosoftMvcAjax.min.js") : Url("MicrosoftMvcAjax.js");
                      
        public static readonly string MicrosoftMvcValidation_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcValidation.debug.min.js") ? Url("MicrosoftMvcValidation.debug.min.js") : Url("MicrosoftMvcValidation.debug.js");
                      
        public static readonly string MicrosoftMvcValidation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MicrosoftMvcValidation.min.js") ? Url("MicrosoftMvcValidation.min.js") : Url("MicrosoftMvcValidation.js");
                      
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class openlibrary_wmd_master {
            private const string URLPATH = "~/Scripts/openlibrary-wmd-master";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Scripts/openlibrary-wmd-master/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string wmd_buttons_png = Url("wmd-buttons.png");
                public static readonly string wmd_buttons_psd = Url("wmd-buttons.psd");
                public static readonly string wmd_buttons2_png = Url("wmd-buttons2.png");
            }
        
            public static readonly string jquery_wmd_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-wmd-plugin.min.js") ? Url("jquery-wmd-plugin.min.js") : Url("jquery-wmd-plugin.js");
                          
            public static readonly string jquery_wmd_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.wmd.min.js") ? Url("jquery.wmd.min.js") : Url("jquery.wmd.js");
                          
            public static readonly string jsmin_py = Url("jsmin.py");
            public static readonly string License_txt = Url("License.txt");
            public static readonly string Makefile = Url("Makefile");
            public static readonly string pasteme_txt = Url("pasteme.txt");
            public static readonly string Readme_md = Url("Readme.md");
            public static readonly string showdown_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/showdown.min.js") ? Url("showdown.min.js") : Url("showdown.js");
                          
            public static readonly string Uservoice_bugs_txt = Url("Uservoice bugs.txt");
            public static readonly string wmd_test_html = Url("wmd-test.html");
            public static readonly string wmd_css = Url("wmd.css");
            public static readonly string wmd_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wmd.min.js") ? Url("wmd.min.js") : Url("wmd.js");
                          
            public static readonly string wmdCustom_css = Url("wmdCustom.css");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class prettify_small_3_Dec_2009 {
            private const string URLPATH = "~/Scripts/prettify-small-3-Dec-2009";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string lang_apollo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-apollo.min.js") ? Url("lang-apollo.min.js") : Url("lang-apollo.js");
                          
            public static readonly string lang_css_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-css.min.js") ? Url("lang-css.min.js") : Url("lang-css.js");
                          
            public static readonly string lang_hs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-hs.min.js") ? Url("lang-hs.min.js") : Url("lang-hs.js");
                          
            public static readonly string lang_lisp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-lisp.min.js") ? Url("lang-lisp.min.js") : Url("lang-lisp.js");
                          
            public static readonly string lang_lua_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-lua.min.js") ? Url("lang-lua.min.js") : Url("lang-lua.js");
                          
            public static readonly string lang_ml_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-ml.min.js") ? Url("lang-ml.min.js") : Url("lang-ml.js");
                          
            public static readonly string lang_proto_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-proto.min.js") ? Url("lang-proto.min.js") : Url("lang-proto.js");
                          
            public static readonly string lang_sql_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-sql.min.js") ? Url("lang-sql.min.js") : Url("lang-sql.js");
                          
            public static readonly string lang_vb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-vb.min.js") ? Url("lang-vb.min.js") : Url("lang-vb.js");
                          
            public static readonly string lang_wiki_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lang-wiki.min.js") ? Url("lang-wiki.min.js") : Url("lang-wiki.js");
                          
            public static readonly string prettify_css = Url("prettify.css");
            public static readonly string prettify_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/prettify.min.js") ? Url("prettify.min.js") : Url("prettify.js");
                          
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class valums_ajax_upload_6f977de {
            private const string URLPATH = "~/Scripts/valums-ajax-upload-6f977de";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ajaxupload_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ajaxupload.min.js") ? Url("ajaxupload.min.js") : Url("ajaxupload.js");
                          
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string activeFlag_png = Url("activeFlag.png");
        public static readonly string arrow_down_png = Url("arrow_down.png");
        public static readonly string arrow_top_png = Url("arrow_top.png");
        public static readonly string attachedFlag_png = Url("attachedFlag.png");
        public static readonly string calibri_ttf = Url("calibri.ttf");
        public static readonly string cancel_png = Url("cancel.png");
        public static readonly string closedFlag_png = Url("closedFlag.png");
        public static readonly string collapseUp_png = Url("collapseUp.png");
        public static readonly string collapseUpActive_png = Url("collapseUpActive.png");
        public static readonly string email_png = Url("email.png");
        public static readonly string expandcollapseArrorSmall__psd = Url("expandcollapseArrorSmall..psd");
        public static readonly string expandDown_png = Url("expandDown.png");
        public static readonly string expandDownActive_png = Url("expandDownActive.png");
        public static readonly string logs_png = Url("logs.png");
        public static readonly string moreinfoFlag_png = Url("moreinfoFlag.png");
        public static readonly string newEmailAlert_png = Url("newEmailAlert.png");
        public static readonly string pendingFlag_png = Url("pendingFlag.png");
        public static readonly string progress_gif = Url("progress.gif");
        public static readonly string resolvedFlag_png = Url("resolvedFlag.png");
        public static readonly string roles_png = Url("roles.png");
        public static readonly string security_png = Url("security.png");
        public static readonly string settings_png = Url("settings.png");
        public static readonly string Site_css = Url("Site.css");
        public static readonly string statusFlag_psd = Url("statusFlag.psd");
        public static readonly string tcEdit_png = Url("tcEdit.png");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class themes {
            private const string URLPATH = "~/Content/themes";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class @base {
                private const string URLPATH = "~/Content/themes/base";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/themes/base/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                }
            
                public static readonly string jquery_ui_css = Url("jquery-ui.css");
            }
        
        }
    
        public static readonly string TicketDesk2Logo_png = Url("TicketDesk2Logo.png");
        public static readonly string TicketDesk2Logo_psd = Url("TicketDesk2Logo.psd");
        public static readonly string unassignedFlag_png = Url("unassignedFlag.png");
        public static readonly string users_png = Url("users.png");
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}




namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

#endregion T4MVC
#pragma warning restore 1591


